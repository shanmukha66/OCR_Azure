{"ast":null,"code":"import axios from 'axios';\n\n// Replace with your actual API key and endpoint\nconst API_KEY = 'YOUR_API_KEY';\nconst API_ENDPOINT = 'https://api.cognitive.microsoft.com/vision/v3.2/read/analyze';\n\n/**\n * Submits an image to the Azure Computer Vision API for OCR analysis\n * @param {File|Blob|string} image - The image to analyze (File, Blob, or base64 string)\n * @returns {Promise} - Promise with the operation location for polling\n */\nexport const submitImageForOCR = async image => {\n  // Prepare the image data\n  let data;\n  let headers = {\n    'Ocp-Apim-Subscription-Key': API_KEY,\n    'Content-Type': 'application/octet-stream'\n  };\n  if (typeof image === 'string' && image.startsWith('data:')) {\n    // Handle base64 image\n    data = Buffer.from(image.split(',')[1], 'base64');\n  } else if (image instanceof File || image instanceof Blob) {\n    // Handle File or Blob\n    data = await image.arrayBuffer();\n  } else {\n    throw new Error('Unsupported image format');\n  }\n  try {\n    const response = await axios.post(API_ENDPOINT, data, {\n      headers\n    });\n    return response.headers['operation-location'];\n  } catch (error) {\n    console.error('Error submitting image for OCR:', error);\n    throw error;\n  }\n};\n\n/**\n * Polls the Azure Computer Vision API for OCR results\n * @param {string} operationLocation - The operation location URL to poll\n * @returns {Promise} - Promise with the OCR results\n */\nexport const getOCRResults = async operationLocation => {\n  const headers = {\n    'Ocp-Apim-Subscription-Key': API_KEY\n  };\n  try {\n    // Poll until the operation is complete\n    let status = 'notStarted';\n    let result;\n    while (status !== 'succeeded' && status !== 'failed') {\n      const response = await axios.get(operationLocation, {\n        headers\n      });\n      result = response.data;\n      status = result.status;\n      if (status !== 'succeeded' && status !== 'failed') {\n        // Wait before polling again\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n    if (status === 'failed') {\n      throw new Error('OCR operation failed');\n    }\n    return result;\n  } catch (error) {\n    console.error('Error getting OCR results:', error);\n    throw error;\n  }\n};\n\n/**\n * Mock function for demo purposes when you don't have an actual API key\n * @param {File|Blob|string} image - The image to analyze\n * @returns {Promise} - Promise with mock OCR results\n */\nexport const mockOCRAnalysis = async image => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 2000));\n\n  // Return mock data\n  return {\n    status: 'succeeded',\n    analyzeResult: {\n      readResults: [{\n        page: 1,\n        lines: [{\n          text: 'Sample Invoice',\n          boundingBox: [100, 100, 300, 100, 300, 130, 100, 130]\n        }, {\n          text: 'Date: 2023-03-15',\n          boundingBox: [100, 150, 300, 150, 300, 180, 100, 180]\n        }, {\n          text: 'Invoice #: INV-12345',\n          boundingBox: [100, 200, 300, 200, 300, 230, 100, 230]\n        }, {\n          text: 'Total Amount: $250.00',\n          boundingBox: [100, 250, 300, 250, 300, 280, 100, 280]\n        }]\n      }]\n    }\n  };\n};","map":{"version":3,"names":["axios","API_KEY","API_ENDPOINT","submitImageForOCR","image","data","headers","startsWith","Buffer","from","split","File","Blob","arrayBuffer","Error","response","post","error","console","getOCRResults","operationLocation","status","result","get","Promise","resolve","setTimeout","mockOCRAnalysis","analyzeResult","readResults","page","lines","text","boundingBox"],"sources":["/Users/shanmukha/Documents/SEM 2/CMPE 280/Cognive Services and OCR/OCR/src/services/ocrService.js"],"sourcesContent":["import axios from 'axios';\n\n// Replace with your actual API key and endpoint\nconst API_KEY = 'YOUR_API_KEY';\nconst API_ENDPOINT = 'https://api.cognitive.microsoft.com/vision/v3.2/read/analyze';\n\n/**\n * Submits an image to the Azure Computer Vision API for OCR analysis\n * @param {File|Blob|string} image - The image to analyze (File, Blob, or base64 string)\n * @returns {Promise} - Promise with the operation location for polling\n */\nexport const submitImageForOCR = async (image) => {\n  // Prepare the image data\n  let data;\n  let headers = {\n    'Ocp-Apim-Subscription-Key': API_KEY,\n    'Content-Type': 'application/octet-stream',\n  };\n\n  if (typeof image === 'string' && image.startsWith('data:')) {\n    // Handle base64 image\n    data = Buffer.from(image.split(',')[1], 'base64');\n  } else if (image instanceof File || image instanceof Blob) {\n    // Handle File or Blob\n    data = await image.arrayBuffer();\n  } else {\n    throw new Error('Unsupported image format');\n  }\n\n  try {\n    const response = await axios.post(API_ENDPOINT, data, { headers });\n    return response.headers['operation-location'];\n  } catch (error) {\n    console.error('Error submitting image for OCR:', error);\n    throw error;\n  }\n};\n\n/**\n * Polls the Azure Computer Vision API for OCR results\n * @param {string} operationLocation - The operation location URL to poll\n * @returns {Promise} - Promise with the OCR results\n */\nexport const getOCRResults = async (operationLocation) => {\n  const headers = {\n    'Ocp-Apim-Subscription-Key': API_KEY,\n  };\n\n  try {\n    // Poll until the operation is complete\n    let status = 'notStarted';\n    let result;\n\n    while (status !== 'succeeded' && status !== 'failed') {\n      const response = await axios.get(operationLocation, { headers });\n      result = response.data;\n      status = result.status;\n\n      if (status !== 'succeeded' && status !== 'failed') {\n        // Wait before polling again\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n\n    if (status === 'failed') {\n      throw new Error('OCR operation failed');\n    }\n\n    return result;\n  } catch (error) {\n    console.error('Error getting OCR results:', error);\n    throw error;\n  }\n};\n\n/**\n * Mock function for demo purposes when you don't have an actual API key\n * @param {File|Blob|string} image - The image to analyze\n * @returns {Promise} - Promise with mock OCR results\n */\nexport const mockOCRAnalysis = async (image) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 2000));\n  \n  // Return mock data\n  return {\n    status: 'succeeded',\n    analyzeResult: {\n      readResults: [\n        {\n          page: 1,\n          lines: [\n            {\n              text: 'Sample Invoice',\n              boundingBox: [100, 100, 300, 100, 300, 130, 100, 130]\n            },\n            {\n              text: 'Date: 2023-03-15',\n              boundingBox: [100, 150, 300, 150, 300, 180, 100, 180]\n            },\n            {\n              text: 'Invoice #: INV-12345',\n              boundingBox: [100, 200, 300, 200, 300, 230, 100, 230]\n            },\n            {\n              text: 'Total Amount: $250.00',\n              boundingBox: [100, 250, 300, 250, 300, 280, 100, 280]\n            }\n          ]\n        }\n      ]\n    }\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}