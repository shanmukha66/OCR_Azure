{"ast":null,"code":"/**\n * Extracts text from OCR results\n * @param {Object} ocrResults - The OCR results from Azure Computer Vision API\n * @returns {string} - The extracted text\n */\nexport const extractText = ocrResults => {\n  if (!ocrResults || !ocrResults.analyzeResult || !ocrResults.analyzeResult.readResults) {\n    return '';\n  }\n  const readResults = ocrResults.analyzeResult.readResults;\n  let extractedText = '';\n  readResults.forEach(page => {\n    if (page.lines) {\n      page.lines.forEach(line => {\n        extractedText += line.text + '\\n';\n      });\n    }\n  });\n  return extractedText;\n};\n\n/**\n * Categorizes OCR text based on patterns\n * @param {string} text - The extracted text from OCR\n * @returns {Object} - Object with categorized information\n */\nexport const categorizeText = text => {\n  const categories = {\n    dates: [],\n    amounts: [],\n    invoiceNumbers: [],\n    names: [],\n    addresses: [],\n    other: []\n  };\n  if (!text) return categories;\n\n  // Split text into lines\n  const lines = text.split('\\n').filter(line => line.trim() !== '');\n\n  // Process each line\n  lines.forEach(line => {\n    // Date patterns (various formats)\n    if (/\\b\\d{1,2}[\\/\\-\\.]\\d{1,2}[\\/\\-\\.]\\d{2,4}\\b/.test(line) || /\\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* \\d{1,2},? \\d{4}\\b/i.test(line) || /\\b\\d{4}[\\/\\-\\.]\\d{1,2}[\\/\\-\\.]\\d{1,2}\\b/.test(line)) {\n      categories.dates.push(line);\n    }\n    // Money amounts\n    else if (/\\$\\s*\\d+([.,]\\d+)*/.test(line) || /\\b\\d+([.,]\\d+)*\\s*(USD|EUR|GBP)\\b/.test(line)) {\n      categories.amounts.push(line);\n    }\n    // Invoice numbers\n    else if (/\\b(invoice|inv|order|receipt)[\\s\\-\\:#]*\\d+\\b/i.test(line) || /\\b[A-Z]{2,}\\-\\d+\\b/.test(line)) {\n      categories.invoiceNumbers.push(line);\n    }\n    // Names (simplified detection)\n    else if (/^[A-Z][a-z]+ [A-Z][a-z]+$/.test(line.trim())) {\n      categories.names.push(line);\n    }\n    // Addresses (simplified detection)\n    else if (/\\d+\\s+[A-Za-z\\s,]+\\b(Street|St|Avenue|Ave|Road|Rd|Boulevard|Blvd|Lane|Ln|Drive|Dr)\\b/i.test(line) || /\\b[A-Z]{2}\\s+\\d{5}(-\\d{4})?\\b/.test(line)) {\n      categories.addresses.push(line);\n    }\n    // Other text\n    else {\n      categories.other.push(line);\n    }\n  });\n  return categories;\n};\n\n/**\n * Analyzes OCR results to extract structured information\n * @param {Object} ocrResults - The OCR results from Azure Computer Vision API\n * @returns {Object} - Object with extracted and categorized information\n */\nexport const analyzeOCRResults = ocrResults => {\n  const extractedText = extractText(ocrResults);\n  const categories = categorizeText(extractedText);\n  return {\n    rawText: extractedText,\n    categories: categories\n  };\n};","map":{"version":3,"names":["extractText","ocrResults","analyzeResult","readResults","extractedText","forEach","page","lines","line","text","categorizeText","categories","dates","amounts","invoiceNumbers","names","addresses","other","split","filter","trim","test","push","analyzeOCRResults","rawText"],"sources":["/Users/shanmukha/Documents/SEM 2/CMPE 280/Cognive Services and OCR/OCR/src/services/ocrUtils.js"],"sourcesContent":["/**\n * Extracts text from OCR results\n * @param {Object} ocrResults - The OCR results from Azure Computer Vision API\n * @returns {string} - The extracted text\n */\nexport const extractText = (ocrResults) => {\n  if (!ocrResults || !ocrResults.analyzeResult || !ocrResults.analyzeResult.readResults) {\n    return '';\n  }\n\n  const readResults = ocrResults.analyzeResult.readResults;\n  let extractedText = '';\n\n  readResults.forEach(page => {\n    if (page.lines) {\n      page.lines.forEach(line => {\n        extractedText += line.text + '\\n';\n      });\n    }\n  });\n\n  return extractedText;\n};\n\n/**\n * Categorizes OCR text based on patterns\n * @param {string} text - The extracted text from OCR\n * @returns {Object} - Object with categorized information\n */\nexport const categorizeText = (text) => {\n  const categories = {\n    dates: [],\n    amounts: [],\n    invoiceNumbers: [],\n    names: [],\n    addresses: [],\n    other: []\n  };\n\n  if (!text) return categories;\n\n  // Split text into lines\n  const lines = text.split('\\n').filter(line => line.trim() !== '');\n\n  // Process each line\n  lines.forEach(line => {\n    // Date patterns (various formats)\n    if (/\\b\\d{1,2}[\\/\\-\\.]\\d{1,2}[\\/\\-\\.]\\d{2,4}\\b/.test(line) || \n        /\\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* \\d{1,2},? \\d{4}\\b/i.test(line) ||\n        /\\b\\d{4}[\\/\\-\\.]\\d{1,2}[\\/\\-\\.]\\d{1,2}\\b/.test(line)) {\n      categories.dates.push(line);\n    }\n    // Money amounts\n    else if (/\\$\\s*\\d+([.,]\\d+)*/.test(line) || /\\b\\d+([.,]\\d+)*\\s*(USD|EUR|GBP)\\b/.test(line)) {\n      categories.amounts.push(line);\n    }\n    // Invoice numbers\n    else if (/\\b(invoice|inv|order|receipt)[\\s\\-\\:#]*\\d+\\b/i.test(line) || /\\b[A-Z]{2,}\\-\\d+\\b/.test(line)) {\n      categories.invoiceNumbers.push(line);\n    }\n    // Names (simplified detection)\n    else if (/^[A-Z][a-z]+ [A-Z][a-z]+$/.test(line.trim())) {\n      categories.names.push(line);\n    }\n    // Addresses (simplified detection)\n    else if ((/\\d+\\s+[A-Za-z\\s,]+\\b(Street|St|Avenue|Ave|Road|Rd|Boulevard|Blvd|Lane|Ln|Drive|Dr)\\b/i.test(line)) ||\n             (/\\b[A-Z]{2}\\s+\\d{5}(-\\d{4})?\\b/.test(line))) {\n      categories.addresses.push(line);\n    }\n    // Other text\n    else {\n      categories.other.push(line);\n    }\n  });\n\n  return categories;\n};\n\n/**\n * Analyzes OCR results to extract structured information\n * @param {Object} ocrResults - The OCR results from Azure Computer Vision API\n * @returns {Object} - Object with extracted and categorized information\n */\nexport const analyzeOCRResults = (ocrResults) => {\n  const extractedText = extractText(ocrResults);\n  const categories = categorizeText(extractedText);\n  \n  return {\n    rawText: extractedText,\n    categories: categories\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}